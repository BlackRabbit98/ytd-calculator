import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { Button, FormControl, FormLabel, Input } from '@mui/material';
import { useState } from 'react';
import useSWR from 'swr';
import axios from 'axios';
import * as yup from 'yup';

type Result = { daysCovered: number; annualPay: number };

export type FormInput = {
	startDate: string;
	endDate: string;
	grossIncome: number | null;
};

const INITIAL_STATE = {
	startDate: '',
	endDate: '',
	grossIncome: 0,
};

const formSchema = yup.object().shape({
	startDate: yup.string().required('*This is required'),
	endDate: yup.string().required('*This is required'),
	grossIncome: yup
		.number()
		.required('*This is required')
		.min(1, '*Must be greater than or equal to 1'),
});

export const BASE_URL = 'http://localhost:3000';
const Home: NextPage = () => {
	const [formData, setFormData] = useState<FormInput>(INITIAL_STATE);

	const validateForm = async (): Promise<boolean> => {
		try {
			await formSchema.validate(formData);
			return true;
		} catch (error: any) {
			console.log(error.message as string);
			return false;
		}
	};

	const fetcher = async () => {
		const isFormValid = await validateForm();
		if (isFormValid) {
			try {
				const { data } = (await axios.post(BASE_URL + '/api/ytd', {
					...formData,
				})) as { data: Result };
				return data;
			} catch (error) {
				return null;
			}
		}
		return null;
	};

	const { data, mutate } = useSWR<Result | null>('/api/ytd', fetcher);

	return (
		<div className={styles.container}>
			<Head>
				<title>YTD Calculator</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className={styles.main}>
				<h1 className={styles.title}>YTD Calculator</h1>

				<form className={styles.form}>
					<FormControl className={styles['form-control']}>
						<FormLabel htmlFor="start-date">
							Date you started job
						</FormLabel>
						<Input
							id="start-date"
							type="date"
							value={formData.startDate}
							onChange={(e) =>
								setFormData((prevState) => ({
									...prevState,
									startDate: e.target.value,
								}))
							}
						/>
					</FormControl>

					<FormControl className={styles['form-control']}>
						<FormLabel htmlFor="end-date">
							End date of most recent payslip:
						</FormLabel>
						<Input
							id="end-date"
							aria-describedby="my-helper-text"
							type="date"
							value={formData.endDate}
							onChange={(e) =>
								setFormData((prevState) => ({
									...prevState,
									endDate: e.target.value,
								}))
							}
						/>
					</FormControl>

					<FormControl className={styles['form-control']}>
						<FormLabel htmlFor="gross-income">
							YTD gross income from your most recent payslip ?:
						</FormLabel>
						<Input
							id="gross-income"
							aria-describedby="my-helper-text"
							value={formData.grossIncome}
							onChange={(e) =>
								setFormData((prevState) => ({
									...prevState,
									grossIncome: Number(e.target.value),
								}))
							}
						/>
					</FormControl>

					<Button
						className={styles.button}
						variant="contained"
						onClick={async () => {
							const data = await fetcher();
							mutate(data);
						}}>
						Calculate
					</Button>
				</form>
				{data && (
					<div className={styles.data}>
						<h3>Calculation Result</h3>
						<p>
							Days covered by your payslip YTD figure:
							<span>{data.daysCovered}</span>
						</p>
						<p>
							Annualised payslip YTD figure:
							<span>{data.annualPay}</span>
						</p>
					</div>
				)}
			</main>
		</div>
	);
};

export default Home;
